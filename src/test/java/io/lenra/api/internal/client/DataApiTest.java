/*
 * Lenra server internal API
 * The API usable by the Lenra applications
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.lenra.api.internal.client;

import io.lenra.api.internal.ApiException;
import io.lenra.api.internal.client.model.DataDocument;
import io.lenra.api.internal.client.model.FindDocumentsRequest;
import io.lenra.api.internal.client.model.UpdateManyDocumentsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataApi
 */
@Disabled
public class DataApiTest {

    private final DataApi api = new DataApi();

    /**
     * Aborts a transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void abortTransactionTest() throws ApiException {
        api.abortTransaction();
        // TODO: test validations
    }

    /**
     * Commits a transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commitTransactionTest() throws ApiException {
        api.commitTransaction();
        // TODO: test validations
    }

    /**
     * Creates a document in database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentTest() throws ApiException {
        String coll = null;
        Object body = null;
        // DataDocument response = api.createDocument(coll, body);
        // TODO: test validations
    }

    /**
     * Creates a transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTransactionTest() throws ApiException {
        String response = api.createTransaction();
        // TODO: test validations
    }

    /**
     * Deletes a collection from database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCollectionTest() throws ApiException {
        String coll = null;
        api.deleteCollection(coll);
        // TODO: test validations
    }

    /**
     * Deletes a document from database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentByIdTest() throws ApiException {
        String coll = null;
        String id = null;
        // DataDocument response = api.deleteDocumentById(coll, id);
        // TODO: test validations
    }

    /**
     * Finds documents in database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findDocumentsTest() throws ApiException {
        String coll = null;
        FindDocumentsRequest findDocumentsRequest = null;
        // Map<String, Object> response = api.findDocuments(coll, findDocumentsRequest);
        // TODO: test validations
    }

    /**
     * Gets a document from database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentByIdTest() throws ApiException {
        String coll = null;
        String id = null;
        // DataDocument response = api.getDocumentById(coll, id);
        // TODO: test validations
    }

    /**
     * Gets documents from database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentsTest() throws ApiException {
        String coll = null;
        // List<DataDocument> response = api.getDocuments(coll);
        // TODO: test validations
    }

    /**
     * Updates a document in database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentByIdTest() throws ApiException {
        String coll = null;
        String id = null;
        DataDocument dataDocument = null;
        // DataDocument response = api.updateDocumentById(coll, id, dataDocument);
        // TODO: test validations
    }

    /**
     * Updates many documents in database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateManyDocumentsTest() throws ApiException {
        String coll = null;
        UpdateManyDocumentsRequest updateManyDocumentsRequest = null;
        Object response = api.updateManyDocuments(coll, updateManyDocumentsRequest);
        // TODO: test validations
    }

}
